#+TITLE: Vanilla Emacs --> Cade's Emacs
#+HTML_HEAD: <style>pre.src{background:#282a36;color:white;} </style>
#+HTML_HEAD: <style>body{background:#44475a;color:white;} </style>
#+HTML_HEAD: <style>a{color:#50fa7b;} </style>
#+HTML_HEAD: <style>h1,h2,h3,h4{color:#bd93f9;} </style>

* Packages

** connect package.el with MELPA
- melpa allows package management without needing manual installation
#+begin_src elisp
(require 'package) 
(add-to-list 'package-archives
  '("melpa" . "https://melpa.org/packages/")) 
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
;; using http instead might stop hangs or having the following
;; (custom-set-variables
;;  '(gnutls-algorithm-priority "normal:-vers-tls1.3"))
#+end_src

** Straight el
- useful for when use-package fails
#+begin_src elisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
	"straight/repos/straight.el/bootstrap.el"
	user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(setq package-enable-at-startup nil) ;; prevents loading before init.el
#+end_src

** installing use-package

#+begin_src elisp 
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+end_src

** Making sure the shell doesn't get messed up
- this package should be loaded first to prevent environment issues
#+begin_src elisp
(use-package exec-path-from-shell :ensure t)
(exec-path-from-shell-initialize)
#+end_src

** Extensible VI Layer

#+begin_src elisp
;; package used for undoing
(use-package undo-fu :ensure t)
(use-package evil
    :ensure t ;; install evil if not installed
    :init     ;; tweak evil's configuration before loading
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-undo-system 'undo-fu)
    (evil-mode))
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src
- zc, zo, zm, zr for folding, need to enable hs minor mode

** General for Key-remaps

#+begin_src elisp
(use-package general
   :ensure t
   :config
   (general-evil-setup t))
#+end_src

** Org-packages

- styling
#+begin_src elisp
(use-package org-bullets
    :ensure t
        :init
        (add-hook 'org-mode-hook (lambda ()
                            (org-bullets-mode 1))))
#+end_src
  
- shortcuts
#+begin_src elisp
(require 'org-tempo)
;; src block short cuts
(add-to-list
 'org-structure-template-alist '("el" . "src elisp"))
#+end_src

- org previewing
#+begin_src elisp
(use-package org-preview-html
  :ensure t
  :config
  (setq org-preview-html-viewer 'xwidget))
#+end_src

- Org Roam [[https://www.orgroam.com][link]]
#+begin_src elisp
(use-package org-roam
  :ensure t
  :config
  (require 'org-roam-utils)
  :bind (:map org-mode-map
              ("C-M-i" . completion-at-point)))
;; directory where notes are stored
(setq org-roam-directory (file-truename "~/org"))
(org-roam-db-autosync-mode)

;; kemappings
(general-define-key
 :states '(normal)
 :keymaps 'org-mode-map
 :prefix "SPC"
 "r i" '(org-roam-node-insert :which-key "node insert")
 "r b" '(org-roam-buffer-toggle :which-key "buffer toggle")
 "P" '(org-preview-html-mode :which-key "Org Preview HTML"))
#+end_src

- Org Agenda
#+begin_src elisp
(setq org-log-done t)
(setq org-agenda-files '("~/.schedule"))
#+end_src

** Which Key

#+begin_src elisp
;; show key binding function
(use-package which-key
  :ensure t
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " --> " ))
(which-key-mode)
#+end_src

** V Terminal

#+begin_src elisp
(setq shell-file-name "/bin/zsh") ;; this will be different for linux and mac machines
(use-package vterm
  :ensure t)
(setq vterm-kill-buffer-on-exit t)
(general-define-key
 :states '(normal)
 :keymaps 'override
 :prefix "SPC"
 "v" '(vterm-other-window :which-key "open vterm in other window"))
;; keybind for closing vterm
(add-hook 'vterm-mode-hook
          #'(lambda ()
              (local-set-key (kbd "C-c q") #'kill-buffer-and-window)))
#+end_src

** Git integration

- evil collections comes with evil magit integration
#+begin_src elisp
;; Git Integration
(use-package magit
  :ensure t)
;; highlight line where there are changes
(use-package git-gutter :ensure t :config (global-git-gutter-mode +1))
#+end_src

** File Browser
- TreeMacs file browser, good for project file browsing
#+begin_src elisp
(use-package treemacs
  :ensure t
  :config
  (setq treemacs-is-never-other-window t)
  (general-define-key
   :states '(normal)
   :keymaps 'override
   :prefix "SPC"
   "N" '(treemacs :which-key "treemacs")
   "n" '(treemacs-select-window :which-key "treemacs")))
#+end_src
  - ~C-c C-p~ gets you to the right key options

- testing ztree with some "vimified" keybindings to help with file navigation. The main draw of ztree is its simplicity and that it is 100% elisp.
#+begin_src elisp
(use-package ztree :ensure t)
(general-define-key
 :states '(normal)
 :keymaps 'override
 :prefix "SPC"
 "z" '(ztree-dir :which-key "open ztree directory view"))
(setq ztree-dir-move-focus t)
(add-hook 'ztree-mode-hook
          #'(lambda ()
             (local-set-key (kbd "C-c q") #'kill-buffer-and-window)))
#+end_src

- adding some vim like keymappings

  | H     | goes back in dir tree                           |
  | L     | goes forward in dir tree                        |
  | o     | expands dir / opens a file in horizontal buffer |
  | q     | closes ztree                                    |
  | x     | fully expands all subdirs of current dir        |
  | C-h   | show/ hide hidden files                         |
  | c-z d | open dired at current point in tree             |

- mac os or "darwin" specific dired config
#+begin_src elisp
(when (string= system-type "darwin")       
  (setq dired-use-ls-dired nil))
#+end_src 

#+begin_src elisp
(general-define-key
 :states '(normal)
 :keymaps 'ztree-mode-map
 "H" 'ztree-dir-widen-to-parent
 "L" 'ztree-dir-narrow-to-dir
 "o" 'ztree-perform-action)
(define-key ztree-mode-map (kbd "C-h") 'ztree-dir-toggle-show-filtered-files)
(define-key ztree-mode-map (kbd "C-z d") 'ztree-dir-open-dired-at-point)
#+end_src

- *Dired Config* 
#+begin_src elisp
;; hide and show dot files
(use-package dired-hide-dotfiles
  :ensure t
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H"  'dired-hide-dotfiles-mode))

;; to prevent persistent dired buffers getting buried
;; dired-single kills old buffers
(use-package dired-single :ensure t)

(use-package dired 
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom
  ((when
       (string= system-type "gnu/linux") ;mac os ls sucks
     (dired-listing-switches "-agho --group-directories-first")))
  :config
  (evil-collection-define-key
    'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

;; if two dired buffers are open and you go to copy,
;; location will default to other dired buffer
(setq dired-dwim-target t)
;; might need (require 'dired-x)

;; file icons
(use-package all-the-icons-dired
  :ensure t
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Language support

*** Flycheck 
- it seems to be a better flymake, if it is too much I will disable 
#+begin_src elisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
;; ensure that standard error handling ports to flycheck
(setq flycheck-standard-error-navigation t)
#+end_src
- some most used error key bindings 
| M-g n   | next error             |
| M-g p   | previous error         |
| C-c !   | error command map      |
| C-c ! e | explain error at point |
| C-c ! h | display error at point |
| C-c ! l | list errors            |

*** LSP-mode

- using lsp-deferred so that only when a buffer is open, this should make startup faster and emacs a bit more performant (i hope)
- I will only be using the LSP with certain languages, for most languages I will try to refrain from using a language server purely to force myself to be a bit more precise while programming
- to add and remove folders use 'C-SPC F'
#+begin_src elisp
;; more IDE like features with LSP
(use-package lsp-ui
  :ensure t
  :after (lsp-mode)
  :commands lsp-ui-doc-hide
  :init
  (setq lsp-ui-doc-enable t)
  :config
  (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)
  (general-nmap
    :keymap 'lsp-ui-mode-map
    "gD" '(lsp-ui-peek-find-definitions :which-key "peek definitions")
    "gr" '(lsp-ui-peek-find-references :which-key "peek references")
    "gc" '(helm-lsp-code-actions :which-key "code actions")
    "TAB" '(lsp-ui-doc-focus-frame :which-key "lsp ui doc focus")
    "K" '(lsp-ui-doc-show :which-key "lsp ui doc show")))

;; lsp mode
(use-package lsp-mode
  :ensure t
  :hook
  (lsp-mode . lsp-enable-which-key-integration)
  ;; golang
  (go-mode . lsp-deferred)
  ;; rust
  (rust-mode . lsp-deferred)
  ;; svelte 
  (web-mode . lsp-deferred)
  :commands (lsp lsp-deferred)
  :bind-keymap ("C-l" . lsp-command-map))


;; blurry icons on mac
(when (string= "darwin" system-type)
  (setq lsp-headerline-breadcrumb-icons-enable nil))

;; dap mode - helpful with dart
(use-package dap-mode
  :ensure t
  :after lsp-mode
  :config (dap-auto-configure-mode))
;; for golang
(require 'dap-dlv-go)
#+end_src
- the documentation of what I am using can be found [[https://emacs-lsp.github.io/lsp-mode/page/main-features/][here]]

*** Company-mode

- this mode allows for an autocomplete window to popup as you code
- i had it enabled in all buffers but was not a huge fan of this so I bound it to the vim COC control space keybinding to initialize it 
#+begin_src elisp
(use-package company
  :ensure t
  :bind ("C-<tab>" . company-mode))

(with-eval-after-load 'company
  (define-key company-active-map (kbd "Tab") nil)
  (define-key company-active-map (kbd "<tab>") nil))
#+end_src

- Remove the tab function as it conflicts with yas snippet

- the "recommended settings"
#+begin_src elisp
(setq company-minimum-prefix-length 1
      company-idle-delay 0.0) ;; default is 0.2
(setq company-selection-wrap-around t)
(setq lsp-ui-doc-show-with-cursor nil)
#+end_src

*** Yas Snippet
- what would and IDE be without some snippets?
- using yas snippet seems to be the best
- enable the global minor mode

#+begin_src elisp
(use-package yasnippet :ensure t
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snips"))
  ;; preventing weird indenting 
  (setq yas-indent-line 'fixed)
  (yas-global-mode 1))
#+end_src

- Snippets are just files (no extension) 

*** Projectile
- projectile helps with project management and navigating the project folders.
#+begin_src elisp
(use-package projectile
  :ensure t
  :custom ((projectile-completion-system 'helm))
  :config (projectile-mode))
;; Recommended keymap prefix on Windows/Linux
(general-define-key
 :states '(normal)
 :prefix "SPC"
 "p" '(projectile-command-map :which-key "projectile command map")
 "p f" '(projectile-find-file :which-key "projectile find file"))
#+end_src
- Some usefull tips
- Projectile is good about guessing what is in a "project dir" but some of the most telltale are .git's and if you want to force it to see a project you can put a ~.projectile~ file in the main dir of your project.
- 
*** colored parens
- easier to see parenthesis colors
#+begin_src elisp
(use-package rainbow-delimiters :ensure t)
(add-hook 'org-mode-hook #'rainbow-delimiters-mode)
(add-hook 'racket-mode-hook #'rainbow-delimiters-mode)
(add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
(add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
(add-hook 'web-mode-hook #'rainbow-delimiters-mode)
(add-hook 'go-mode-hook #'rainbow-delimiters-mode)
(add-hook 'js-mode-hook #'rainbow-delimiters-mode)
(add-hook 'typescript-mode-hook #'rainbow-delimiters-mode)
(add-hook 'python-mode-hook #'rainbow-delimiters-mode)
(add-hook 'julia-mode-hook #'rainbow-delimiters-mode)
(add-hook 'zig-mode-hook #'rainbow-delimiters-mode)
(add-hook 'rust-mode-hook #'rainbow-delimiters-mode)
(add-hook 'geiser-mode-hook #'rainbow-delimiters-mode)
(use-package aggressive-indent :ensure t)
(add-hook 'racket-mode-hook #'aggressive-indent-mode)
(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
(add-hook 'clojure-mode-hook #'aggressive-indent-mode)
(add-hook 'web-mode-hook #'aggressive-indent-mode)
(add-hook 'geiser-mode-hook #'rainbow-delimiters-mode)
#+end_src
*** Helm
- helm is a fuzzy finder for emacs
#+begin_src elisp
(use-package helm-lsp :ensure t)
(use-package helm
  ;; recommended to use straight
  :straight t 				 
  :bind
  (("M-x" . helm-M-x))
  (("C-x C-f" . helm-find-files))
  :config
  (helm-mode 1)
  (require 'helm-config))
#+end_src
*** lua
- use neovim for lua but for notes i use emacs
#+begin_src elisp
(use-package lua-mode :ensure t)
#+end_src
*** Flutter/ dart
- flutter & dart support
- automatically connects with lsp mode 
#+begin_src elisp
  (use-package lsp-dart
    :ensure t
    :hook
    (dart-mode . lsp-deferred)
    (dart-mode . hs-minor-mode))
  ;; hover for running apps
  (use-package hover
    :ensure t
    :after dart-mode
    :init (hover-minor-mode 1))
  (setq hover-hot-reload-on-save t)

  ;; Assuming usage with dart-mode
  (use-package dart-mode
    :custom
    (dart-sdk-path (concat (getenv "HOME") "/flutter/bin/cache/dark-sdk/")
     dart-format-on-save t))
  ;; keybindings, using d as primary key
  (general-def
    :states 'normal
    :keymaps 'dart-mode-map
    :prefix "SPC"
    "d o" '(lsp-dart-show-flutter-outline :which-key "show flutter outline")
    "d r" '(lsp-dart-run :which-key "dart run")
    "d h r" '(lsp-dart-dap-flutter-hot-reload :which-key "hot reload")
    "d h R" '(lsp-dart-dap-flutter-hot-restart :which-key "hot restart")
    "d h h" '(hover-run-or-hot-reload :which-key "hover run or hot reload")
    "d p" '(lsp-dart-pub-get :which-key "dart pub get"))
#+end_src
*** GoLang
- Getting go-mode installed
#+begin_src elisp
(use-package go-mode :ensure t)
(use-package ob-go :ensure t)
#+end_src

- some settings promoted by go, allows for auto-formatting on save
#+begin_src elisp
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+end_src
*** Rust 
- facebook says this is the next big thing so better learn it
#+begin_src elisp
(use-package rust-mode :ensure t)
(add-hook 'rust-mode-hook
	  (lambda () (setq indent-tabs-mode nil)))
(setq rust-format-on-save t)
(use-package cargo-mode :ensure t)
(use-package ob-rust :ensure t)
#+end_src
*** Julia
- essentially a newer version of python. Like it for data science as it's *jit* compiled and all packages are written just in julia.
#+begin_src elisp
(use-package julia-mode :ensure t)
#+end_src
*** Zig
- supposed to be a better C
#+begin_src elisp
(use-package zig-mode :ensure t)
#+end_src
*** Web Languages (JS, TS, Svelte)
- *REST client* in emacs
#+begin_src elisp
(use-package restclient :ensure t)
(add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))
#+end_src
- C-c C-c: runs the query under the cursor, tries to pretty-print the response (if possible)
- C-c C-r: same, but doesn't do anything with the response, just shows the buffer
- C-c C-v: same as C-c C-c, but doesn't switch focus to other window
- C-c C-p: jump to the previous query
- C-c C-n: jump to the next query
- C-c C-.: mark the query under the cursor
- C-c C-u: copy query under the cursor as a curl command
- C-c C-g: start a helm session with sources for variables and requests (if helm is available, of course)
- C-c n n: narrow to region of current request (including headers)
- TAB: hide/show current request body, only if
- C-c C-a: show all collapsed regions
- C-c C-i: show variable at point 
- getting support for *svelte* / web development
#+begin_src elisp
(use-package web-mode :ensure t)
(setq web-mode-enable-auto-pairing t)
;; html support 
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
;; css support
(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
;; svelte support
(add-to-list 'auto-mode-alist '("\\.svelte\\'" . web-mode))
;; framework engines
(setq web-mode-engines-alist
      '(("svelte" . "\\.svelte\\'")))

(eval-after-load "web-mode"
  '(setq web-mode-enable-auto-expanding t))

;; allows for org block highlighting
(use-package svelte-mode :ensure t)
#+end_src

- *typescript-mode* a major mode for ts files 
#+begin_src elisp
(use-package typescript-mode
  :ensure t
  :hook (typescript-mode . (lambda ()
			     (setq lsp-disabled-clients '(ts-ls))
			     (lsp-deferred))))
(add-hook 'js-mode-hook (lambda ()
			  (setq lsp-disabled-clients '())
			  (lsp-deferred)))
#+end_src
*** HTML
- emmet mode for easy html 
#+begin_src elisp
(use-package emmet-mode
  :ensure t
  :hook
  (web-mode . emmet-mode))
#+end_src
*** Python
- uses lsp-pyright with the open source pyright server. Using this because it can be used with nvim /emacs.
- the settings of which can be found [[https://emacs-lsp.github.io/lsp-pyright/][here]]. 
#+begin_src elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))
#+end_src 

*** Lisp(s)
**** Racket
- [[https://www.racket-mode.com/#Install-Racket-Mode][racket mode]] website
#+begin_src elisp
(use-package racket-mode :ensure t) 
;; org mode src block support
(use-package ob-racket
  :after org
  :config
  (add-hook 'ob-racket-pre-runtime-library-load-hook
	      #'ob-racket-raco-make-runtime-library)
  :straight (ob-racket
	       :type git :host github :repo "hasu/emacs-ob-racket"
	       :files ("*.el" "*.rkt")))

(general-define-key
 :states '(normal)
 :keymaps 'racket-mode-map
 :prefix "SPC"
 "\\" '(racket-insert-lambda :which-key "insert lambda"))

(general-define-key
 :states '(visual)
 :keymaps 'racket-mode-map
 :prefix "SPC"
 "r" '(racket-send-region :which-key "send region"))
#+end_src
- key bindings
  | binding | function              |
  |---------+-----------------------|
  | C-c C-c | run                   |
  | M-.     | xref-find-definitions |
  | M-?     | xref-find-references  |
  | M-,     | xref-pop-marker-stack |
**** Lisp & scheme
- using the sbcl version of common lisp with slime mode
- org babel enabled 
#+begin_src elisp
(use-package slime :ensure t)
(setq slime-lisp-implementations 
      '((roswell ("ros" "-L" "sbcl-bin" "run"))))
(general-define-key
 :keymaps 'lisp-mode-map
 :prefix "C-c"
 "C-z" '(slime :which-key "slime"))
#+end_src
- using geiser for guile scheme
#+begin_src elisp
(use-package geiser-guile :ensure t)
(general-define-key
 :states '(normal)
 :keymaps 'geiser-mode-map
 :prefix "SPC"
 "l f" '(geiser-load-file :which-key "load file")
 "\\" '(geiser-insert-lambda :which-key "insert lambda"))
(general-define-key
 :states '(visual)
 :keymaps 'geiser-mode-map
 :prefix "SPC"
 "r" '(geiser-eval-region :which-key "eval region"))
#+end_src
**** Clojure
#+begin_src elisp
;; error handling / linting
(use-package flycheck-clj-kondo :ensure t)
(use-package clojure-mode
  :ensure t
  :config
  (require 'flycheck-clj-kondo))
(use-package cider :ensure t)
(general-define-key
 :states '(visual)
 :keymaps 'cider-mode-map
 :prefix "SPC"
 "r" '(cider-eval-region :which-key "send region"))
#+end_src

**** smart parens
#+begin_src elisp
(use-package smartparens :ensure t)
(require 'smartparens-config)
(sp-pair "\<" nil :actions :rem) ;don't use with < from html 

;; language support
(add-hook 'clojure-mode-hook #'smartparens-mode)
(add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
(add-hook 'lisp-interaction-mode-hook #'smartparens-mode)
(add-hook 'lua-mode-hook #'smartparens-mode)
(add-hook 'go-mode-hook #'smartparens-mode)
(add-hook 'js-mode-hook #'smartparens-mode)
(add-hook 'typescript-mode-hook #'smartparens-mode)
(add-hook 'racket-mode-hook #'smartparens-mode)
(add-hook 'rust-mode-hook #'smartparens-mode)
(add-hook 'scheme-mode-hook #'smartparens-mode)
(add-hook 'python-mode-hook #'smartparens-mode)
(add-hook 'zig-mode-hook #'smartparens-mode)

(general-define-key
   :states '(normal)
   :keymaps 'smartparens-mode-map
   :prefix "SPC"
   ">" '(sp-up-sexp :which-key "up sexp")
   "<" '(sp-down-sexp :which-key "down sexp")
   "{" '(sp-backward-barf-sexp :whick-key "Barf backward")
   "}" '(sp-forward-barf-sexp :which-key "Barf forward")
   "(" '(sp-backward-slurp-sexp :whick-key "Slurp backward")
   ")" '(sp-forward-slurp-sexp :which-key "Slurp forward")
   "^" '(sp-join-sexp :which-key "join sexp")
   "+" '(sp-absorb-sexp :which-key "absorb sexp")
   "|" '(sp-split-sexp :which-key "split sexp"))
#+end_src
*** Markdown

#+begin_src elisp
(use-package markdown-mode :ensure t
  :config
  (add-hook 'markdown-mode-hook 'flyspell-mode)) ;make sure spelling is alright
#+end_src

*** cht.sh
#+begin_src elisp
(use-package cheat-sh :ensure t)
#+end_src
* Themes

- getting rid of some junk

#+begin_src elisp
;;(menu-bar-mode 0)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq make-backup-files nil) 
(setq auto-save-default nil)
#+end_src

- adding line numbers

#+begin_src elisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
(add-hook 'org-mode-hook
          (lambda () (display-line-numbers-mode -1)))
(add-hook 'vterm-mode-hook
          (lambda () (display-line-numbers-mode -1)))
(setq display-line-numbers-type 'relative)
#+end_src 
  
*** Color theme(s)

- a nice gruv theme for tiling window manager setup
  
#+begin_src elisp
(use-package dracula-theme :ensure t)
(load-theme 'dracula t)
;; (use-package gruvbox-theme :ensure t)
;; (load-theme 'gruvbox-dark-soft t)
#+end_src

*** modeline

- smart mode line, seems like a better vanilla mode line 
#+begin_src elisp
;; (use-package smart-mode-line :ensure t)
;; (setq sml/theme 'respectful)
;; (setq sml/no-confirm-load-theme t)
;; (setq sml/shorten-modes t)
;; (sml/setup)
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

*** Tabline
#+begin_src elisp
(use-package centaur-tabs
  :ensure t
  :config
  (setq
   centaur-tabs-set-icons t
   centaur-tabs-gray-out-icons 'buffer
   centaur-tabs-set-modified-marker t
   centaur-tabs-modified-marker ""
   centaur-tabs-height 32))
;; font specific config
(if (string= "gnu/linux" system-type)
    (centaur-tabs-change-fonts "Monoid Nerd Font" 160)
  (centaur-tabs-change-fonts "Fira Code Nerd Font" 160))
#+end_src
*** TreeSitter
- doesn't work on apple silicon 

#+begin_src elisp
(use-package tree-sitter :ensure t)
(use-package tree-sitter-langs :ensure t)
(require 'tree-sitter)
(require 'tree-sitter-langs)
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

*** Font's

- *Font* setup, I am a fan of firacode. It is the best because of how it renders 0's and && symbols (it's not opinion but fact :) )
  - using the all the icons package to make sure that unicode glyphs don't get messed up
  - you have to remember to run ~m-x all-the-icons-install-fonts~ 

#+begin_src elisp
(use-package all-the-icons :ensure t)
(when (string= system-type "gnu/linux")
  (add-to-list 'default-frame-alist '(font . "Monoid Nerd Font 12")))
(when (string= system-type "darwin")       
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font 14")))
#+end_src
- for whatever reason you need the add to list for emacs server to work

*** Errors & warnings 
  
- getting the error bell sound to go away and just having the mode-line flash

#+begin_src elisp
(setq visible-bell nil
      ring-bell-function 'flash-mode-line)
(defun flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src
  
*** Dashboard
#+begin_src elisp
(use-package dashboard
  :ensure t
  :config
  (setq dashboard-startup-banner 3)
  (setq dashboard-set-init-info nil)
  (setq dashboard-center-content t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-items
           '((projects . 10)
            (recents . 5))))
;; startup the dashboard 
(dashboard-setup-startup-hook)
#+end_src
* Org-configuration
** Org Beautification, basics
#+begin_src elisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/org/"
        org-hide-emphasis-markers t
        org-bullets-bullet-list '("●" "○" "◆" "◇"))
(setq org-src-preserve-indentation nil)
;; allows for syntax highlighting on exports
(use-package htmlize :ensure t) 
#+end_src
- adding the following lines give *dracula* export
  - /#+HTML_HEAD: <style>pre.src{background:#282a36;color:white;} </style>/
  - /#+HTML_HEAD: <style>body{background:#44475a;color:white;} </style>/
  - /#+HTML_HEAD: <style>a{color:#50fa7b;} </style>/
  - /#+HTML_HEAD: <style>h1,h2,h3,h4{color:#bd93f9;} </style>/
** Code-Block highlighting
#+begin_src elisp
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)
#+end_src
** Babel Code-Block Configuration

- language configuration
  - adding conf file type for configuring other programs
  
#+begin_src elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((go .t)
   (js . t)
   (lisp . t)
   (python . t)
   (racket . t)
   (rust . t)
   (scheme . t)))
;; basic conf
(push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

- making sure that the colors are the right shade etc... using the fixed pitch variable
#+begin_src elisp
(require 'color)
;; src blocks
(set-face-attribute
 'org-block nil
 :foreground nil
 :background "#191a21"
 :inherit '(fixed-pitch))
;; code
(set-face-attribute 'org-code nil
                    :inherit '(shadow fixed-pitch))
#+end_src

- JS configuration for babel source blocks

#+begin_src elisp
(require 'ob-js)
(add-to-list 'org-babel-tangle-lang-exts '("js" . "js"))
#+end_src

* Key Re-mapping
- *keymaps using General plugin*
- these are non-package related key maps 
#+begin_src elisp
(general-def :states 'normal :keymaps 'override :prefix "SPC"
  "a"     '(org-agenda :which-key "org-agenda")
  "c c"   '(compile :which-key "Compile")
  "c C"   '(recompile :which-key "Recompile")
  "h r r" '((lambda ()
              (interactive)
              (load-file "~/.emacs.d/init.el"))
            :which-key "Reload emacs config")
  "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")
  "t l"   '(centaur-tabs-mode :which-key "tab line mode")
  "<left>"   '(centaur-tabs-backward :which-key "tab backward")
  "<right>"  '(centaur-tabs-forward :which-key "tab forward")
  ;; buffers
  "b"     '(switch-to-buffer :which-key "switch to buffer")
  ;; File manipulation
  "."     '(helm-find-files :which-key "Find file")
  "f s"   '(save-buffer :which-key "Save file")
  "f C"   '(copy-file :which-key "Copy file")
  "f D"   '(delete-file :which-key "Delete file")
  "r f"   '(org-roam-node-find :which-key "find node")
  "f R"   '(rename-file :which-key "Rename file")
  "k b"   '(kill-buffer-and-window :which-key "kill and close current")
  "k s"   '(kill-some-buffers :which-key "kill some buffers")
  ;; cht sheet
  "c h"   '(cheat-sh :which-key "open cheat sheet lookup"))
#+end_src

- making vim like remaps 
#+begin_src elisp
;; better yanking 
(general-nmap "Y" (kbd "y$"))

;; better searching
;; centers each result
(general-nmap "n" 'search-next-center-evil)
(defun search-next-center-evil () 
  (interactive)
    (evil-search-next)
    (evil-scroll-line-to-center
      (line-number-at-pos (point))))

(general-nmap "N" 'search-prev-center-evil)
(defun search-prev-center-evil () 
  (interactive)
    (evil-search-previous)
    (evil-scroll-line-to-center
      (line-number-at-pos (point))))
#+end_src
** zooming
- change text size 
#+begin_src elisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src
* Native Comp settings
#+begin_src elisp
(setq warning-minimum-level 'error)
#+end_src
