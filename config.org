#+TITLE: Minimal Literate Config

* Config & Packages
#+begin_src elisp
;; ----- Native Comp Settings
(setq warning-minimum-level :error)

;; ----- Backup Files
(setq make-backup-files nil)
(setq create-lockfiles nil)
(setq auto-save-default nil)

;; ----- Error & Warnings
;; disable bell
(setq visible-bell nil
	  ring-bell-function 'flash-mode-line)
;; define warning function
(defun flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))

;; ----------------------------
;; ----- Package Managers -----
;; ----------------------------
;; ----- Setting Package Repo's
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

;; ----- Fonts
(add-to-list 'default-frame-alist '(font . "Fira Code Nerd Font 14"))

(use-package all-the-icons
  :if (display-graphic-p)
  :ensure t)

;; ----- Tabs
(setq-default tab-width 4)

;; ----- Exec Path From Shell 
(use-package exec-path-from-shell 
  :ensure t)
;; get the shell paths first
(exec-path-from-shell-initialize)

;; ----- Evil Mode
;; undo for evil mode
(use-package undo-fu 
  :ensure t) 
(use-package evil 
  :ensure t
  :init
  ;; set to nil for use with evil collection
  (setq evil-want-keybinding nil)
  ;; set undo to undo-fu before loading
  (setq evil-undo-system 'undo-fu))
(evil-mode 1)
;; evil collections for use with dired
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init
   '(calendar
     magit
     dired
     corfu
     cider
     racket
     xref
     org
     ediff)))

;; vterm block
(add-hook 'vterm-mode-hook
		  (lambda ()
			(setq-local evil-insert-state-cursor 'box)))

(blink-cursor-mode 0)

;; ----- Auto Pairing
(add-hook 'prog-mode-hook (lambda () (electric-pair-local-mode)))

;; ----- Folding
(add-hook 'prog-mode-hook (lambda () (hs-minor-mode)))

;; ----- Line highlighting
(add-hook 'prog-mode-hook #'hl-line-mode)


;; ----- General
(use-package general 
  :ensure t
  :init
  (setq general-override-states '(motion))
  :config
  (general-evil-setup t))

;; ----- Helm
(use-package helm
  :ensure t)
;; remap chords to helm
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(helm-mode 1)				; global enable

;; ----- NeoTree
(use-package neotree
  :ensure t
  :init
  (setq neo-theme 'arrow))

;; ----- Rainbow-delimiters
(use-package rainbow-delimiters
  :ensure t)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;; ----- Which Key
(use-package which-key 
  :ensure t)
(which-key-mode)

;; ----- Theme(s)
;; startup
(setq inhibit-startup-screen t)

(use-package doom-themes
  :ensure t)
(load-theme 'doom-one t)

;; hiding toolbar
(tool-bar-mode -1)
;; hiding menubar
(menu-bar-mode -1)
;; hiding scrollbar
(scroll-bar-mode -1)

;; modeline
(use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1))

;; syntax highlighting
(use-package htmlize
  :ensure t)

;; line numbers (programming modes only)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
;; line highlighting
(add-hook 'prog-mode-hook #'hl-line-mode)

;; ----- TreeSitter
(if (version< (format "%s" emacs-major-version) "29")
	(progn
	  (use-package tree-sitter :ensure t)
	  (use-package tree-sitter-langs :ensure t))
  (require 'treesit))

;; ----- Projectile
;; uses helm by default 
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map
	(kbd "C-c p")
	'projectile-command-map)
  (projectile-mode +1))

;; ----- Git Gutter
(use-package git-gutter
  :ensure t
  :config
  (global-git-gutter-mode +1))

;; ----- Magit
(use-package magit
  :ensure t)

;; ----- V Term
(setq shell-file-name "/run/current-system/sw/bin/zsh")
(use-package vterm 
  :ensure t)
(setq vterm-kill-buffer-on-exit t)
#+end_src
* Languages
** Completion / lsp
#+begin_src elisp
;; ---- Corfu
(use-package corfu
  :ensure t
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  :init
  (global-corfu-mode))

;; Flycheck
(use-package flycheck
  :ensure t
  :config
  (global-flycheck-mode))		; global enable
;; use flycheck by default
(setq flycheck-standard-error-navigation t)

;; ---- Lsp
(use-package lsp-mode
  :ensure t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook ((lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; UI
(use-package lsp-ui
  :ensure t
  :init
  (setq lsp-ui-doc-enable t)
  :commands (lsp-ui-mode lsp-ui-doc-hide)
  :config
  (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)
  (general-nmap
    :keymap 'lsp-ui-mode-map
    "gd" '(lsp-ui-peek-find-definitions :which-key "peek definitions")
    "gr" '(lsp-ui-peek-find-references :which-key "peek references")
    "gc" '(helm-lsp-code-actions :which-key "code actions")
    "TAB" '(lsp-ui-doc-focus-frame :which-key "lsp ui doc focus")
    "K" '(lsp-ui-doc-glance :which-key "lsp ui doc show")))

;; Helm interop
(use-package helm-lsp
  :ensure t
  :commands helm-lsp-workspace-symbol)
;; ---------------

;; Yas Snippet
(use-package yasnippet :ensure t
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snips"))
  ;; preventing weird indenting 
  (setq yas-indent-line 'fixed)
  (yas-global-mode 1))
#+end_src
** C
#+begin_src elisp
;; ----- C
(add-hook 'c-mode-hook #'tree-sitter-hl-mode)
(add-hook 'c++-mode-hook #'tree-sitter-hl-mode)

;; ----- Bindings
(general-define-key
 :states '(normal visual)
 :keymaps 'c++-mode-map
 :prefix "SPC"
 ;; comp programming commands
 "c b" '(custcpp-build-file :which-key "cpp build file")
 "c r" '(cpp-run-file :which-key "cpp run file"))
#+end_src
** Clojure
#+begin_src elisp
;; ----- Clojure
(use-package clojure-mode
  :ensure t)
;; REPL managment
(use-package cider
  :ensure t)
;; org
(require 'ob-clojure)
(setq org-babel-clojure-backend 'cider)

;; ----- Bindings
;; "g z" switches btwn buffer and repl
(general-define-key
 :states '(normal visual)
 :keymaps 'clojure-mode-map
 :prefix "SPC"
 "c j" '(cider-jack-in-clj :which-key "cider jack in clj")
 "c r" '(cider-eval-region :which-key "cider eval region")
 "c b" '(cider-eval-buffer :which-key "cider eval buffer")
 "c f" '(cider-eval-file :which-key "cider eval file"))
#+end_src
** Dart
#+begin_src elisp
(use-package dart-mode
  :ensure t)
#+end_src
** Go
#+begin_src elisp
(use-package go-mode
  :ensure t)
#+end_src
** JS/TS
- jsx is treated as js-mode
#+begin_src elisp
;; HTML / JSX
;; use C-j to expand
(use-package emmet-mode
  :ensure t
  :hook
  (js-mode . emmet-mode)
  (html-mode . emmet-mode))

;; hooks
(add-hook 'js-mode-hook #'tree-sitter-hl-mode)
;; run org blocks
(require 'ob-js)
#+end_src
** Nim
#+begin_src elisp
;; ----- Nim
(use-package nim-mode
  :ensure t)
#+end_src
** Ocaml
#+begin_src elisp
;; ----- Ocaml
(use-package tuareg
  :ensure t)
(require 'ob-ocaml)
#+end_src
** Python
#+begin_src elisp
;; ----- Python
(use-package python-mode
  :ensure t
  :init
  (setq py-split-window-on-execute nil))
(use-package pyvenv
  :ensure t)
(add-hook 'python-mode-hook 'tree-sitter-hl-mode)

;; toggle inferior shell process
(defun toggle-py-shell ()
  (interactive)
  (switch-to-buffer-other-window "*Python*"))

;; ----- Bindings
(general-define-key
 :states 'normal
 :keymaps 'python-mode-map
 :prefix "SPC"
 "b f" '(python-black-format-buffer :which-key "python black format buffer")
 "d a" '(django-async-command :which-key "run async django command")
 "d c" '(django-command :which-key "run django command")
 "t f" '(python-unittest-file :which-key "unittest current file from project root"))
(general-define-key
 :keymaps 'python-mode-map
 :prefix "C-c"
 "C-z" '(toggle-py-shell :which-key "switch to shell"))
;; toggle previous window, ideally python buffer
(general-define-key
 :keymaps 'py-shell-mode-map
 :prefix "C-c"
 "C-z" '((lambda ()
		   (interactive)
		   (previous-multiframe-window))
		 :which-key "other window"))

(require 'ob-python)
#+end_src
** Rust
#+begin_src elisp
;; ----- Rust
(use-package rust-mode
  :ensure t
  :hook
  (rust-mode . tree-sitter-hl-mode))
;; org src support
(use-package ob-rust
  :ensure t)

;; ----- Bindings
(add-hook 'rust-mode-hook
		  (lambda ()
			(local-set-key (kbd "C-c m") #'toggle-mut)))
#+end_src
** Scala
#+begin_src elisp
(use-package scala-mode
  :ensure t)
#+end_src
** Scheme
#+begin_src elisp
;; ----- Racket
(use-package racket-mode
  :ensure t)

;; ----- Bindings
(general-define-key
 :states 'normal
 :keymaps 'racket-mode-map
 "C-x C-e" '((lambda ()
			   (interactive)
			   (progn
				 (evil-append 1) 
				 (racket-eval-last-sexp)
				 (evil-normal-state)))
			 :which-key "racket eval last sexp"))
#+end_src
** Custom Funcs
*** C++
#+begin_src elisp
;; ---------------
;; ----- C++ -----
;; ---------------
(defun cc-run-file ()
  "Run current file"
  (interactive)
  (let* ((fname (buffer-file-name))
         (len (length fname))
         (name (substring fname 0 (- len 4))))
    (async-shell-command name)
    (switch-to-buffer-other-window
     "*Async Shell Command*")
    (evil-normal-state)))

(defun cc-build-file ()
  "Build go project"
  (interactive)
  (let* ((fname (buffer-file-name))
         (len (length fname))
         (name (substring fname 0 (- len 4))))
    (shell-command (concat
                    "g++ -Wall "
                    fname
                    " -o "
                    name))))
;; -----------------------
#+end_src
*** Formatting
#+begin_src elisp
;; ----------------------
;; ----- Formatting -----
;; ----------------------

;; Python formatter (better than LSP)
(defun python-black-format-buffer ()
  "Formats a py buffer using the black formatter."
  (interactive)
  (let ((xfpath (buffer-file-name)))
    (if xfpath
        (progn
          (save-buffer)
          (shell-command
           (format "black %s"
                   (shell-quote-argument xfpath)))
          (revert-buffer t t t))
      (user-error "Current buffer must be a file"))))
;; ------------------------
#+end_src
*** Project
#+begin_src elisp
;; finding Cargo.toml
(defun project-find-cargo-toml (dir)
  (when-let ((root (locate-dominating-file dir "Cargo.toml")))
    (cons 'cargo-toml root)))
(cl-defmethod project-root ((project (head cargo-toml)))
  (cdr project))
(add-hook 'project-find-functions #'project-find-cargo-toml)
#+end_src
*** Python
#+begin_src elisp
;; ---- Django Commands 
;; sync
(defun django-command ()
  "run a manage.py command"
  (interactive)
  (let ((default-directory (project-root (project-current))))
    (shell-command
     (format "%s %s" "./manage.py"
             (read-string "DJ=> ")))))
;; async
(defun django-async-command ()
  "run a manage.py async command"
  (interactive)
  (let ((default-directory (project-root (project-current))))
    (async-shell-command
     (format "%s %s" "./manage.py"
             (read-string "DJ[async]=> ")))))
;; ---------------------
#+end_src
*** Rust
#+begin_src elisp
(defun toggle-mut ()
  "Toggles the mutability of the variable defined on the current line"
  (interactive)
  (save-excursion
    (back-to-indentation)
    (forward-word)
    (if (string= " mut" (buffer-substring (point) (+ (point) 4)))
        (delete-region (point) (+ (point) 4))
      (insert " mut"))))
#+end_src
*** Non language funcs
#+begin_src elisp
;; ----- Vterm
(defun find-vterm (lis)
  "find terminal and switch to term buffer"
  (cond
   ((eq '() lis)
    (vterm-other-window))
   ((string= (car lis) "*vterm*")
    (switch-to-buffer-other-window (car lis)))
   (t
    (find-vterm (cdr lis)))))

(defun switch-to-vterm ()
  "switch to or from vterm window"
  (interactive)
  (let
      ((bufs (mapcar #'buffer-name (buffer-list))))
    (if
	(string= "*vterm*" (buffer-name))
	(previous-multiframe-window)
      (find-vterm bufs))))
#+end_src
* Keybindings
#+begin_src elisp
;; ----- All Modes 
(general-define-key
 :states '(normal motion)
 :keymaps 'override
 :prefix "SPC"
 ;; Helm 
 "." '(helm-find-files :which-key "helm-find-files")
 ;; buffer management
 "b s" '(switch-to-buffer :which-key "switch to buffer")
 "b k" '(kill-buffer-and-window :which-key "kill buffer and window")
 "b K" '(kill-some-buffers :which-key "kill some buffers")
 "b t" '(tear-off-window :which-key "tear off window")
 ;; compiling
 "c c" '(compile :which-key "compile")
 ;; git
 "g p" '(git-gutter:popup-hunk :which-key "git gutter popup hunk")
 "g R" '(git-gutter:revert-hunk :which-key "git gutter revert hunk")
 "g n" '(git-gutter:next-hunk :which-key "git gutter next hunk")
 ;; load conf
 "l c" '((lambda ()
           (interactive)
           (find-file "~/.emacs.d/config.org"))
         :which-key "load conf")
 ;; Neotree
 "n" '(neotree-toggle :which-key "neotree toggle")
 ;; project 
 "p R" '(project-remember-projects-under
         :which-key "project remember project")
 "p F" '(project-forget-project :which-key "project forget project")
 "p ." '(project-find-file :which-key "project find file")
 "p f" '(project-switch-project :which-key "project switch project")
 "p a" '(project-async-shell-command
         :which-key "project async shell command")
 "p c" '(project-shell-command :which-key "project shell command")
 ;; Org Roam
 "r f" '(org-roam-node-find :which-key "org roam node find")
 ;; whitespace
 "w" '(whitespace-mode :which-key "whitespace mode"))

;; ----- Evil Bindings
;; Yanking to end of line
(general-define-key
 :states 'normal
 "Y" (kbd "y$"))

;; ----- Scrolling
(general-define-key
 :states '(normal insert)
 "C-d" #'(lambda ()
		   (interactive)
		   (evil-scroll-page-down 1)
		   (evil-window-middle)))
(general-define-key
 :states '(normal insert)
 "C-u" #'(lambda ()
		   (interactive)
		   (evil-scroll-page-up 1)
		   (evil-window-middle)))
;; inserting ; at the end of the line
(general-define-key
 :states 'normal
 "C-;" (kbd "A;"))
(general-define-key
 :states 'insert
 "C-;" #'(lambda ()
		   (interactive)
		   (progn
			 (end-of-line)
			 (insert ";"))))
;; ----- Center Searching 
;; search next
(defun search-next-center-evil ()
  (interactive)
  (evil-search-next)
  (evil-scroll-line-to-center
   (line-number-at-pos (point))))
;; search previous 
(defun search-prev-center-evil () 
  (interactive)
  (evil-search-previous)
  (evil-scroll-line-to-center
   (line-number-at-pos (point))))
;; remap
(general-define-key
 :states 'normal
 "n" 'search-next-center-evil)
(general-define-key
 :states 'normal
 "N" 'search-prev-center-evil)
;; ---------------------- 

;; ----- Neotree
;; evil bindings
(evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
(evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
(evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
(evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
(evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
(evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
(evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
(evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
(evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)

;; ----- Org Roam
(general-define-key
 :states 'normal
 :keymaps 'org-mode-map
 :prefix "SPC"
 "p s" '(org-present :which-key "org present")
 "p q" '(org-present-quit :which-key "org present quit")
 "p n" '(org-present-next :which-key "org present next")
 "p p" '(org-present-prev :which-key "org present prev")
 "r i" '(org-roam-node-insert :which-key "org roam node insert")
 "r b" '(org-roam-buffer-toggle :which-key "org roam buffer toggle")
 "l p" '(org-latex-preview :which-key "org latex preview"))

;; ----- V Term
(general-define-key
 :states 'normal
 :prefix "SPC"
 "v" '(switch-to-vterm :which-key "switch-to-vterm"))
#+end_src
* Notes
** Org
#+begin_src elisp
;; -----------------------
;; ----- Org Config ----- 
;; -----------------------

;; ---- Presenting
(use-package org-present
  :ensure t)
;; ----- Org Roam
(use-package org-roam
  :ensure t
  :config
  (require 'org-roam-utils)
  ;; for exporting
  (require 'org-roam-export)
  :bind (:map org-mode-map
              ("C-M-i" . completion-at-point)))

(use-package org-bullets :ensure t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;; src blocks
(require 'color)
(add-hook 'org-mode-hook 'org-indent-mode)
;; load babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((clojure . t)
   (python . t)
   (shell . t)
   (rust . t)))

;; directory where notes are stored
(setq org-roam-directory (file-truename "~/org"))
(org-roam-db-autosync-mode)
;; line wrapping
(add-hook 'org-mode-hook #'visual-line-mode)
;; org shortcuts
(require 'org-tempo)

;; setting up org src blocks
(setq
  org-confirm-babel-evaluate nil
  org-src-preserve-indentation nil
  org-edit-src-content-indentation 0)

;; custom function for resetting org links for export
(defun reset-roam-links ()
  "Reset links in org when it can't export."
  (interactive)
  (progn
    (org-roam-db-clear-all)
    (org-roam-db-sync)
    (org-id-update-id-locations)
    (org-roam-update-org-id-locations)))
#+end_src
** Setting up note class
#+begin_src elisp
;; ----- Latex Export
(require 'ox-latex)
(setq org-latex-classes nil)

;; increase size of latex preview
(setq org-format-latex-options
      (plist-put org-format-latex-options :scale 2.5))
;; create custom note class
(add-to-list 'org-latex-classes
	     ;; elegantnote should come with latex
	     '("note"
	       "\\documentclass[en]{elegantnote} \\usepackage{minted}"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
** setting up minted
#+begin_src elisp
;; set minted as default
(setq org-latex-listings 'minted)
;;style settings
(setq org-latex-minted-options
      '(("fontsize" "\\small")
        ("frame" "lines")
        ("breaklines" "true")
        ("linenos" "true")
        ("breakanywhere" "true")
        ("bgcolor" "yellow!5")))
;;need -shell-escape for minted
(setq org-latex-pdf-process
      '("latexmk -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -output-directory=%o -f %f"))
#+end_src
** Custom Funcs
#+begin_src elisp
;; fix exported names 
(defun rename-exported-notes ()
  "Renames exported pdf's to something a bit more readable."
  (interactive)
  (let ((default-directory "~/org"))
  (shell-command
   "./rename.clj")))

;; custom function to export to pdf without TOC
(defun no-toc-org-export-to-latex ()
  (interactive)
  (progn
    (setq org-export-with-toc nil)
    (org-latex-export-to-pdf)
    (setq org-export-with-toc t)
    (rename-exported-notes)))
#+end_src
