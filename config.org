#+TITLE: Minimal Literate Config

* Config & Packages
#+begin_src elisp
;; ----- Native Comp Settings
(setq warning-minimum-level :error)

;; ----- Backup Files
(setq make-backup-files nil)
(setq create-lockfiles nil)
(setq auto-save-default nil)

;; ----- Error & Warnings
;; disable bell
(setq visible-bell nil
      ring-bell-function 'flash-mode-line)
;; define warning function
(defun flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))

;; ----- Fonts
(add-to-list 'default-frame-alist '(font . "Hack Nerd Font 16"))

;; ----- Use Package 
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

;; ----- Exec Path From Shell 
(use-package exec-path-from-shell 
  :ensure t)
;; get the shell paths first
(exec-path-from-shell-initialize)

;; ----- Evil Mode
;; undo for evil mode
(use-package undo-fu 
  :ensure t) 
(use-package evil 
  :ensure t
  :init
  ;; set to nil for use with evil collection
  (setq evil-want-keybinding nil)
  ;; set undo to undo-fu before loading
  (setq evil-undo-system 'undo-fu))
(evil-mode 1)
;; evil collections for use with dired
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init
   '(calendar
     magit
     dired
     corfu
     xref
     ediff)))

;; ----- Smart Parens
(use-package smartparens
  :ensure t)
(require 'smartparens-config)

;; ----- General
(use-package general 
  :ensure t
  :init
  (setq general-override-states '(motion))
  :config
  (general-evil-setup t))

;; ----- Helm
(use-package helm
  :ensure t)
;; remap chords to helm
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(helm-mode 1)				; global enable

;; ----- NeoTree
(use-package neotree
  :ensure t
  :init
  (setq neo-theme 'arrow)
  :hook
  (neotree-mode .
		(lambda ()
		  (display-line-numbers-mode -1))))

;; ----- Org Roam
(use-package org-roam
  :ensure t
  :config
  (require 'org-roam-utils)
  ;; for exporting
  (require 'org-roam-export)
  :bind (:map org-mode-map
              ("C-M-i" . completion-at-point)))
;; directory where notes are stored
(setq org-roam-directory (file-truename "~/org"))
(org-roam-db-autosync-mode)
;; line wrapping
(add-hook 'org-mode-hook #'visual-line-mode)
;; org shortcuts
(require 'org-tempo)

;; setting up org src blocks
(setq
 org-confirm-babel-evaluate nil
 org-edit-src-content-indentation 0)

;; custom function for resetting org links for export
(defun reset-roam-links ()
  "Reset links in org when it can't export."
  (interactive)
  (progn
    (org-roam-db-clear-all)
    (org-roam-db-sync)
    (org-id-update-id-locations)
    (org-roam-update-org-id-locations)))

;; ----- Rainbow-delimiters
(use-package rainbow-delimiters
  :ensure t)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;; ----- Which Key
(use-package which-key 
  :ensure t)
(which-key-mode)

;; ----- Theme(s)
;; startup
(setq inhibit-startup-screen t)

;; Dracula
(use-package dracula-theme
  :ensure t
  :config
  (load-theme 'dracula t))

;; hiding toolbar
(tool-bar-mode -1)

;; modeline
(use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1))

;; syntax highlighting
(use-package htmlize
  :ensure t)

;; line numbers
(global-display-line-numbers-mode)

;; ----- TreeSitter
(use-package tree-sitter
  :ensure t)
(use-package tree-sitter-langs
  :ensure t)

;; ----- Projectile
;; uses helm by default 
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map
              (kbd "C-c p")
              'projectile-command-map)
  (projectile-mode +1))

;; ----- Git Gutter
(use-package git-gutter
  :ensure t
  :config
  (global-git-gutter-mode +1))

;; ----- Magit
(use-package magit
  :ensure t)

;; ----- V Term
(setq shell-file-name "/bin/zsh")
(use-package vterm 
  :ensure t)
(setq vterm-kill-buffer-on-exit t)
(add-hook 'vterm-mode-hook
          (lambda ()
            (display-line-numbers-mode -1)))
#+end_src
* Languages
#+begin_src elisp
;; ---------------
;; ----- LSP -----
;; ---------------

;; ---- Corfu
(use-package corfu
  :ensure t
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  :init
  (global-corfu-mode))

;; Flycheck
(use-package flycheck
  :ensure t
  :config
  (global-flycheck-mode))		; global enable
;; use flycheck by default
(setq flycheck-standard-error-navigation t)

;; Helm Lsp
(use-package helm-lsp
  :ensure t
  :commands helm-lsp-workspace-symbol)

;; ----- Lsp-Mode
(use-package lsp-mode
  :ensure t
  :custom
  (lsp-completion-provider :none) ;; corfu used
  :init
  (setq lsp-keymap-prefix "C-c l")
  (defun my/lsp-mode-setup-completion ()
    (setf
     (alist-get 'styles
                (alist-get 'lsp-capf completion-category-defaults))
     '(flex))) ;; Configure flex
  :hook
  ((lsp-completion-mode . my/lsp-mode-setup-completion)
   (clojure-mode . lsp)
   (js-mode . lsp)
   (rust-mode . lsp)
   (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; Lsp UI
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
(setq lsp-ui-sideline-show-diagnostics t)
;; ---------------

;; Yas Snippet
(use-package yasnippet :ensure t
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snips"))
  ;; preventing weird indenting 
  (setq yas-indent-line 'fixed)
  (yas-global-mode 1))

;; ----- Clojure
(use-package clojure-mode
  :ensure t
  :hook
  (clojure-mode . smartparens-mode))
;; REPL managment
(use-package cider
  :ensure t)
;; org
(require 'ob-clojure)
(setq org-babel-clojure-backend 'cider)

;; ----- Go
(use-package go-mode
  :ensure t
  :hook
  (go-mode . tree-sitter-hl-mode)
  (go-mode . smartparens-mode))

;; ----- HTML / Vue
;; use C-j to expand
(use-package emmet-mode
  :ensure t
  :hook
  (web-mode . emmet-mode))
;; Web Mode for better html editing
(use-package web-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))

;; ----- JS /TS
;; lang specific hooks
(add-hook 'js-mode-hook #'tree-sitter-hl-mode)
(add-hook 'js-mode-hook #'smartparens-mode)
;; run org blocks
(require 'ob-js)
;; TS setup 
(use-package typescript-mode
  :ensure t
  :hook
  (typescript-mode . smartparens-mode)
  (typescript-mode . tree-sitter-hl-mode))

;; ----- Julia
(use-package julia-mode
  :ensure t
  :hook
  (julia-mode . tree-sitter-hl-mode)
  (julia-mode . smartparens-mode))
;; repl support
(use-package julia-vterm
  :ensure t)
;; babel support
(use-package ob-julia-vterm
  :ensure t)

;; ----- Lua
(use-package lua-mode
  :ensure t
  :hook
  (lua-mode . smartparens-mode))
;; org integration
(require 'ob-lua)

;; ----- PHP
(use-package php-mode
  :ensure t)

;; ----- Python
(require 'python)
(use-package pyvenv
  :ensure t)

;; ----- Rust
(use-package rust-mode
  :ensure t
  :hook
  (rust-mode . tree-sitter-hl-mode)
  (rust-mode . smartparens-mode))
;; org src support
(use-package ob-rust
  :ensure t)

;; ruby
(require 'ob-ruby)
(use-package enh-ruby-mode
  :ensure t
  :hook
  (enh-ruby-mode . smartparens-mode))
(add-to-list 'auto-mode-alist '("\\.rb\\'" . enh-ruby-mode))

;; ----- Svelte
(use-package svelte-mode
  :ensure t)

;; ----- Zig
(use-package zig-mode
  :ensure t
  :hook
  (zig-mode . tree-sitter-hl-mode)
  (zig-mode . smartparens-mode))

;; ----- Org Config
;; no line numbers
(add-hook 'org-mode-hook
          (lambda ()
            (display-line-numbers-mode -1)))

;; src blocks
(require 'color)
(set-face-attribute
 'org-block nil
 :foreground nil
 :background
 (color-darken-name
  (face-attribute 'default :background) 10))

;; better indentation
(add-hook 'org-mode-hook
          'org-indent-mode)
;; load babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((clojure . t)
   (js . t)
   (julia . t)
   (rust . t)))

;; ---------------------
;; ----- Functions -----
;; ---------------------

(defun custom-js-format-buffer ()
  "Formats a js buffer using the deno formatter."
  (interactive)
  (let ((xfpath (buffer-file-name)))
    (if xfpath
        (progn
          (save-buffer)
          (shell-command
           (format "deno fmt %s"
                   (shell-quote-argument xfpath)))
          (revert-buffer t t t))
      (user-error "Current buffer must be a file"))))

;; Load ruby file into repl
(defun ruby-load-file ()
  "open eshell with ruby loaded in"
  (interactive)
  (let
      ((file buffer-file-name)
       (term-buf (vterm)))
    (switch-to-buffer (other-buffer term-buf))
    (switch-to-buffer-other-window term-buf)
    (with-current-buffer term-buf
      (vterm--goto-line -1)
      (vterm-send-string (format " irb -r %s" file))
      (vterm-send-return))))

;; ---- Rails Functions
(defun is-rails-project? ()
  "Using projectile determine if file is in a rails project."
  (if (eq nil (projectile-project-root))
      (progn (user-error "not in project") nil)
    (if (eq nil
	    (executable-find (format "%sbin/rails" (projectile-project-root))))
	(progn (user-error "not rails project") nil)
      t)))

(defun rails-command-send (args)
  "Send given [ARGS] to \='compilation-start\=' so project rails can run it."
  (let ((rails-exe
	 (format "%sbin/rails %s" (projectile-project-root) args)))
    (async-shell-command
     (format "cd %s && %s" (projectile-project-root) rails-exe)
     "*Rails Command*")
    (pop-to-buffer "*Rails Command*")
    (evil-normal-state)))
    

(defun rails-run-server ()
  "Start rails server with \='rails-command-send\=' function."
  (interactive)
  (if (is-rails-project?)
      (progn 
	(message "running rails server...")
	(rails-command-send "s"))
    nil))

(defun rails-run-command ()
  "Get user input and use `compilation-start' to run it."
  (interactive)
  (if (is-rails-project?)
      (rails-command-send (read-string "Rails => "))
    nil))

(defun rails-test-file ()
  "If the current file is in a RoR project use the project rails to test it."
  (interactive)
  (if (is-rails-project?)
      (let ((rails-exe
	     (format "%sbin/rails" (projectile-project-root)))
	    (b-name (format "===TEST[%s]===" (buffer-name)))
	    (test-file (buffer-file-name)))
	(with-output-to-temp-buffer b-name
	  (shell-command
	   (format "%s test %s" rails-exe test-file) b-name))
	(pop-to-buffer b-name))
    nil))

(defun rails-start-console ()
  "Start rails console using a new vterm buffer named accordingly."
  (interactive)
  (if (is-rails-project?)
      (let ((arg "c")
	    (rails-exe
	     (format "%sbin/rails c" (projectile-project-root)))
	    (term-buf
	     (vterm (concat "*" "rails console" "*"))))
	(message "starting rails console...")
	(switch-to-buffer (other-buffer term-buf))
	(switch-to-buffer-other-window term-buf)
	(with-current-buffer term-buf
	  (vterm--goto-line -1)
	  (vterm-send-string rails-exe)
	  (vterm-send-return)))
    nil))
#+end_src
* Keybindings
#+begin_src elisp
;; ----- All Modes 
(general-define-key
 :states '(normal motion)
 :keymaps 'override
 :prefix "SPC"
 ;; Helm 
 "." '(helm-find-files :which-key "helm-find-files")
 ;; buffer management
 "b s" '(switch-to-buffer :which-key "switch to buffer")
 "b k" '(kill-buffer-and-window :which-key "kill buffer and window")
 "b K" '(kill-some-buffers :which-key "kill some buffers")
 "b t" '(tear-off-window :which-key "tear off window")
 ;; compiling
 "c c" '(compile :which-key "compile")
 ;; Projectile
 "p f ." '(projectile-find-file :which-key "projectile find file")
 "p f w" '(projectile-find-file-other-window :which-key "projectile find file other window")
 ;; Neotree
 "n" '(neotree-toggle :which-key "neotree toggle")
 ;; Org Roam
 "r f" '(org-roam-node-find :which-key "org roam node find")
 ;; whitespace
 "w" '(whitespace-mode :which-key "whitespace mode"))

;; ----- Evil Bindings
;; Yanking to end of line
(general-define-key
 :states 'normal
 "Y" (kbd "y$"))

;; ----- Center Searching 
;; search next
(defun search-next-center-evil ()
  (interactive)
  (evil-search-next)
  (evil-scroll-line-to-center
   (line-number-at-pos (point))))
;; search previous 
(defun search-prev-center-evil () 
  (interactive)
  (evil-search-previous)
  (evil-scroll-line-to-center
   (line-number-at-pos (point))))
;; remap
(general-define-key
 :states 'normal
 "n" 'search-next-center-evil)
(general-define-key
 :states 'normal
 "N" 'search-prev-center-evil)
;; ---------------------- 

;; ----- LSP
;; nvim like bindings
(general-define-key
 :states 'normal
 :keymaps 'lsp-ui-mode-map
 ;; hover
 "K" '(lsp-ui-doc-show :which-key "lsp ui doc show")
 ;; finding def / references
 "gd" '(lsp-ui-peek-find-definitions :which-key "lsp ui peak find definitions")
 "gr" '(lsp-ui-peek-find-references :which-key "lsp ui peak find references"))
;; formatting 
(general-define-key
 :states '(normal visual)
 :keymaps 'lsp-mode-map
 :prefix "SPC"
 "f b" '(lsp-format-buffer :which-key "lsp format buffer")
 "f r" '(lsp-format-region :which-key "lsp format region"))

;; ----- Neotree
;; evil bindings
(evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
(evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
(evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
(evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
(evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
(evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
(evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
(evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
(evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)

;; ----- Clojure 
;; "g z" switches btwn buffer and repl
(general-define-key
 :states 'normal
 :keymaps 'clojure-mode-map
 :prefix "SPC"
 "c j" '(cider-jack-in-clj :which-key "cider jack in clj")
 "c r" '(cider-eval-region :which-key "cider eval region")
 "c b" '(cider-eval-buffer :which-key "cider eval buffer")
 "c f" '(cider-eval-file :which-key "cider eval file")
 )

;; ----- JS  
(general-define-key
 :states 'normal
 :keymaps 'js-mode-map
 :prefix "TAB"
 "f" '(custom-js-format-buffer :which-key "custom-js-format-buffer"))

;; ----- Org Roam
(general-define-key
 :states 'normal
 :keymaps 'org-mode-map
 :prefix "SPC"
 "r i" '(org-roam-node-insert :which-key "org roam node insert")
 "r b" '(org-roam-buffer-toggle :which-key "org roam buffer toggle")
 "l p" '(org-latex-preview :which-key "org latex preview"))

;; ----- Ruby
(general-define-key
 :states 'normal
 :keymaps 'enh-ruby-mode-map
 :prefix "SPC"
 "l f" '(ruby-load-file :which-key "ruby load file")
 "r s" '(rails-run-server :which-key "rails run server")
 "r c" '(rails-start-console :which-key "rails start console")
 "r r" '(rails-run-command :which-key "rails run command")
 "r t" '(rails-test-file :which-key "rails test file"))

;; ----- Smartparens
;; ()
(sp-pair "(" ")" :wrap "C-(")
;; {}
(sp-pair "{" "}" :wrap "C-{")
;; []
(sp-pair "[" "]" :wrap "M-[")

;; ----- V Term
(general-define-key
 :states 'normal
 :prefix "SPC"
 "v" '(switch-to-vterm :which-key "switch-to-vterm"))

;; ---------------------
;; ----- Functions -----
;; ---------------------
(defun find-vterm (lis)
  "find terminal and switch to term buffer"
  (cond
   ;; if 
   ((eq '() lis)
    ;; then
    (vterm-other-window))
   ;; if 
   ((string= (car lis) "*vterm*")
    ;; then
    (switch-to-buffer-other-window (car lis)))
   ;; else
   (t
    (find-vterm (cdr lis)))))

(defun switch-to-vterm ()
  "switch to or from vterm window"
  (interactive)
  (let
      ((bufs (mapcar #'buffer-name (buffer-list))))
    (if
	(string= "*vterm*" (buffer-name))
	;; true
	(previous-multiframe-window)
      ;; false
      (find-vterm bufs))))
#+end_src
* Notes
** Setting up note class
#+begin_src elisp
;; ----- Latex Export
(require 'ox-latex)
(setq org-latex-classes nil)
;; custom function to export to pdf without TOC
(defun no-toc-org-export-to-latex ()
  (interactive)
  (progn
    (setq org-export-with-toc nil)
    (org-latex-export-to-pdf)
    (setq org-export-with-toc t)
    (rename-exported-notes)))
;; increase size of latex preview
(setq org-format-latex-options
      (plist-put org-format-latex-options :scale 2.5))
;; create custom note class
(add-to-list 'org-latex-classes
	     ;; elegantnote should come with latex
	     '("note"
	       "\\documentclass[en]{elegantnote} \\usepackage{minted}"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
** setting up minted
#+begin_src elisp
;; set minted as default
(setq org-latex-listings 'minted)
;; style settings
(setq org-latex-minted-options
      '(("fontsize" "\\small")("frame" "lines")
	("breaklines" "true")
	("linenos" "true")
	("breakanywhere" "true")
	("bgcolor" "yellow!5")))
;; need -shell-escape for minted
(setq org-latex-pdf-process
      '("latexmk -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -output-directory=%o -f %f"))
#+end_src
** custom funcs 
#+begin_src elisp
;; fix exported names 
(defun rename-exported-notes ()
  "Renames exported pdf's to something a bit more readable."
  (interactive)
  (shell-command
   "cd ~/org && clj -M rename.clj"))
#+end_src
